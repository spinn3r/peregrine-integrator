
- The web interface needs its own scratch dir so it can get the LATEST commit
  information.

- A % of completed slots would be nice so that when a job is tryign to catch up
  on a LOT of work due to a large-retest then I can see the percentage...  I'm
  going to need a system to log this every hour.

  - I need the ability to embed CPU metrics.

- A test is only pink if it isn't completed... n
  
- change the web root so that index.html is on /

- We're linking to test-logs that do not exist yet.

- restart the daemon again so that coverage and test aren't working.

- put the test-basic in its own test suite though I don't htink it's taking much time.

- how are we going to purge old tests... I think I need to use OLD_AGE to do this.


- it would be NICE to mark a rev as broken and just skip testing it.

- once ANY of the tests fails it would be nice to just abort testing all the
  other tests on the same rev.  That should probably be the default and then we
  can have some mechanism to force a test.

    - Do we want to test on JDK 1.7 and 1.6 too?
    - What about XFS and ext4?

    - I think the right way to handle this would be to have:

        - 1:1:1:1 (jdk1.6+XFS)
        - 1:1:1:1 (jdk1.6+ext4)
        - 1:1:1:1 (jdk1.7+XFS) 
        - 1:1:1:1 (jdk1.7+ext4)

- disk space issues...
    - only generate reports if the tests FAIL.  Otherwise we're going to be
    - burning a LOT of disk space.
        
 - Scheduling algorithm notes:

    - If the most recent version of a build passes, we shouldn't spend time
      testing OLDER verisons of the build.  That's just silly... The only time
      this is an issue is when we're trying to find out where a build has
      broken.  In that situation it DOES make sense to test older revisions but
      we need to figure out WHEN we are in that use case.

    - Bug... if 1:1:1:1 is all up to date, but 1:1:1:2 has 20 CLs to test, then
      we don't use any more resources to test those CLs.
