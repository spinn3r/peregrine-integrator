#!/usr/bin/python

###
#
# Write the main web interface for the integrator.

import datetime
import os
import re
import shutil
import subprocess
import sys
import time
import traceback
import libintegrator

NAME=None
TEST_LOGS=None
SCRATCH=None

BASEDIR="/var/lib/integration/peregrine/foo"

class ReportIndex:

    basedir=None
    configs=None

    def __init__(self,basedir,configs):

        self.basedir=basedir
        self.configs=configs

        path="%s/index.html" % basedir

        print "Going to write index: %s" % path

        file=open( path , "w" );

        file.write( "<html>\n" )

        # FIXME: make this CSS now that I've created a peregrine-integrator repo.

        file.write( "<head>\n" )
        file.write( "<style>\n" )
        file.write( "* { font-family: sans-serif; font-size: 12px;}\n" )
        file.write( "td,th { padding-left: 5px; padding-right: 5px; }\n" )
        file.write( "tr:hover { background-color: lightgrey; }\n" )
        file.write( "th { text-align: left; }\n" )
        file.write( ".rev-anchor { display: block; }\n" )
        file.write( ".duration { text-align: right; }\n" )
        file.write( "</style>\n" )

        file.write( "<meta http-equiv='cache-control' content='no-cache'>\n" )
        file.write( "<title>Integration report</title>\n" )
        file.write( "</head>\n" )
        file.write( "<body>\n" )

        # file.write( "<b>Test command: </b> %s<br/>\n" % TEST_COMMAND )
        # file.write( "<b>Post command: </b> %s<br/>\n" % POST_COMMAND )

        # if ( testing_rev != None ):
        #     file.write( "<b>Status: </b> Testing rev: %s<br/>\n" % testing_rev )

        file.write( "<table width='100%' cellspacing='0'>\n" )

        file.write( "<tr>\n" )

        for config in configs:
            file.write( "<th>%s</th>\n" % config.name );
        
        file.write( "<th>rev</th>\n" );
        file.write( "<th>branch</th>\n" );
        file.write( "<th>author</th>\n" );
        file.write( "<th>duration</th>\n" );
        file.write( "<th>commit time</th>\n" );
        file.write( "<th>diff</th>\n" );
        file.write( "<th>output</th>\n" );
        file.write( "</tr>\n" )

        file.flush()
        file.close()

    def link( self, rev, log, status ):
        """Write a link to the given URL."""

        changedir=libintegrator.get_changedir(self.basedir, rev)

        time = datetime.datetime.fromtimestamp( float( log['date'] ) )

        duration=libintegrator.readpath("%s/duration" % (changedir))

        if ( duration ):
            duration = int(float(duration))
        else:
            duration=""

        file=open( "%s/index.html" % self.basedir , "a" );

        file.write( "<tr>\n" )

        for config in configs:

            bgcolor=status[config.name]
            
            file.write( "<td bgcolor='%s'><a class='rev-anchor' href='%s/test-reports/'></a></td>\n" % (bgcolor,rev) )

        file.write( "<td nowrap><a href='%s/test.log'>%s</a></td>\n" % (rev,rev) )
        file.write( "<td nowrap>%s</td>\n" % log['branch'] )
        file.write( "<td nowrap>%s</td>\n" % log['author'] )
        file.write( "<td class='duration' nowrap>%s</td>\n" % duration )
        file.write( "<td nowrap>%s</td>\n" % libintegrator.strftime(time) )

        file.write( "<td align='right'><a href='https://bitbucket.org/burtonator/peregrine/changeset/%s'>CS</a></td>\n" % rev )

        for output_name, output_dir in OUTPUT.items():

            output_full_path="%s/%s" % (changedir, output_name)

            if ( os.path.exists( output_full_path ) ):
                file.write( "<td nowrap><a href='%s/%s'>%s</a></td>\n" % (rev,output_name,output_name) )
            else:
                print "Output path does not exist: %s" % output_full_path
                file.write( "<td></td>\n" )

        file.write( "<td nowrap>%s</td>\n" % log['desc'] )

        file.write( "</tr>\n" )
        file.close()

    def close(self):

        file=open( "%s/index.html" % self.basedir , "a" );

        now = datetime.datetime.now()

        file.write( "</table>\n" )
        file.write( "<br/><center><small>%s</small></center>\n" % (libintegrator.strftime(now)) )
        file.write( "</body>\n" )
        file.write( "</html>\n" )

        file.flush()

        file.close()

def get_color_for_status( status ):

    if status == -1:
        return "gray"

    if status == 0:
        return "green"

    return "red"

def get_status_for_configs(configs,rev):
    """For each config, read the status off disk for the given rev."""

    result={}

    for config in configs:

        result[ config.name ] = get_color_for_status( libintegrator.get_rev_status( config.test_logs, rev ) )

    return result

def write_index(configs):
    """Write the full index of the index"""

    index   = ReportIndex(BASEDIR, configs)

    try:

        changelog = libintegrator.get_change_index_flat(SCRATCH)

        for change in changelog:
            
            rev = change['rev']

            status = get_status_for_configs( configs, rev)
            index.link( rev, change, status )

    finally:
        
        index.close()

class Conf:

    name=None
    test_logs=None
    scratch=None

    def __init__(self,name,test_logs,scratch):
        self.name = name
        self.test_logs = test_logs
        self.scratch = scratch

configs=[]

for conf in sorted( os.listdir( "./conf/" ) ):

    execfile( "conf/%s" % conf )

    if NAME != None:
        print "Using config: %s" % NAME
        configs.append( Conf( NAME, TEST_LOGS, SCRATCH ) )

    NAME=None
    TEST_LOGS=None

print "Working with configs: %s" % configs

write_index(configs)    

#FIXME: we are just left with the LAST scratch dir... prioritize it to use the most up to date one.
    
# now just get the list of changset IDs from HG.
